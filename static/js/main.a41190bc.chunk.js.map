{"version":3,"sources":["Constants.js","Components/ListItem.js","Components/BadgeScanDelivery.js","Components/List.js","Components/SwagItem.js","Components/SwagList.js","Components/ResetPassword.js","Components/CheckAssociate.js","Components/AddSwagBadge.js","Components/MassUpload.js","Components/IndividualUserAddition.js","Components/MassUserAddition.js","Components/AddUser.js","Components/ManagerApproval.js","Components/Login.js","Components/Register.js","Components/EachComment.js","Components/CommentSection.js","App.js","serviceWorker.js","index.js"],"names":["HOSTNAME","ListItem","props","alert","useAlert","item","useState","loading","setLoading","confirm","setConfirm","confirmType","setConfirmType","deliverOrder","fetch","method","headers","body","JSON","stringify","cart_id","then","res","json","data","status","success","error","catch","err","console","log","finally","getStore","fulfillOrder","cancelOrder","displayButton","className","onClick","id","style","backgroundColor","selectColor","display","user_name","user_first_name","user_manager","swag_name","quantity","BadgeScanDelivery","user_id","setUserId","flexDirection","justifyContent","alignItems","onSubmit","event","preventDefault","count","reason","placeholder","onChange","e","target","value","List","search","setSearch","manager","setManager","title","marginTop","listOfOrders","filter","includes","map","key","paddingTop","href","SwagItem","swag_item_id","price","stock","SwagList","setItemID","setItemName","setItemPrice","setItemStock","swag_image","setItemImage","setDisplay","swagList","setSwagList","onEditItem","getSwagList","swag_items","useEffect","marginLeft","toLowerCase","ResetPassword","setUserName","CheckAssociate","setUserID","window","open","AddSwagBadge","swag_amt","setSwag","setReason","amountRef","createRef","current","today","Date","toLocaleDateString","user_data","manager_user_name","date","user","ref","MassUpload","hideResults","setHideResults","path","setPath","successList","setSuccessList","failedList","setFailedList","submitAddition","a","now","associateData","files","type","accept","fr","FileReader","readAsText","onloadend","uploadedFile","result","length","slice","currentIndex","getNextToken","token","parseFileAndSubmit","maxHeight","overflowY","margin","borderBottom","IndividualUserAddition","setUserFirstName","classname","MassUserAddition","failList","setFailList","submitAdd","AddUser","ManagerApproval","approvalList","setApprovalList","getData","borderRadius","padding","gridTemplateColumns","paddingRight","active","fontWeight","color","chooseLoading","Login","setRoute","password","setPassword","onLogin","setID","confirmPassword","setConfirmPassword","chooseRoute","EachComment","response","setResponse","getComments","maxWidth","content","width","CommentSection","comments","setComments","comment_id","App","route","setListOfOrder","beingFulfilled","setBeingFulfilled","order","Register","flexWrap","Boolean","location","hostname","match","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a41190bc.chunk.js","sourcesContent":["const HOSTNAME = 'https://tranquil-meadow-63605.herokuapp.com/'\r\nexport {HOSTNAME};","import React , {useState} from 'react';\r\nimport {useAlert} from 'react-alert'\r\n\r\nimport {HOSTNAME} from './../Constants'\r\nimport './../App.scss'\r\n\r\nconst ListItem = (props) => {\r\n    const alert = useAlert();\r\n    const {item} = props;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [confirmType, setConfirmType] = useState('');\r\n\r\n    /*\r\n    const printLabel = () => {\r\n        window.open(HOSTNAME+'print-label/'+item.cart_id);\r\n    }\r\n    */\r\n\r\n    const deliverOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'temp-delivery/', \r\n        {\r\n            method: 'POST',\r\n            headers : \r\n            {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status==='SUCCESS')\r\n                alert.success('SUCCESSFULLY MARKED ORDER AS DELIVERED');\r\n            else alert.error('ERROR, PLEASE TRY AGAIN LATER OR WRITE DOWN ORDER PULLED');\r\n\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert.error('CONNECTION ERROR. PLEASE CHECK YOUR CONNECTION!');\r\n        }).finally(() => {\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n\r\n    const fulfillOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'fulfill-order/', \r\n        {\r\n            method: 'POST',\r\n            headers : \r\n            {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status==='SUCCESS')\r\n                alert.success('SUCCESSFULLY FULFILLED ORDER');\r\n            else alert.error('ERROR IN FULFILLING ORDER, PLEASE TRY AGAIN LATER');\r\n\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert.error('CONNECTION ERROR. PLEASE CHECK YOUR CONNECTION!');\r\n        }).finally(() => {\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n    const cancelOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'cancel-order/', \r\n        {\r\n            method :'POST',\r\n            headers :\r\n            {\r\n                'Content-Type':'application/json',\r\n            },\r\n            body: JSON.stringify(\r\n            {\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            if(data.status === 'SUCCESS') alert.success('SUCESSFULLY CANCELLED ORDER');\r\n            else alert.error('SOMETHING WENT WRONG, PLEASE TRY AGAIN LATER');\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert.error('CANNOT CONNECT TO SERVER, PLEASE TRY AGAIN LATER');\r\n        })\r\n        .finally(()=>{\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n    const backOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'back-order/', \r\n        {\r\n            method :'POST',\r\n            headers :\r\n            {\r\n                'Content-Type':'application/json',\r\n            },\r\n            body: JSON.stringify(\r\n            {\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            if(data.status === 'SUCCESS') alert.success('SUCESSFULLY BACK ORDERED');\r\n            else alert.error('SOMETHING WENT WRONG, PLEASE TRY AGAIN LATER');\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert.error('CANNOT CONNECT TO SERVER, PLEASE CHECK YOUR INTERNET CONNECTION');\r\n        })\r\n        .finally(()=>{\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n    const displayButton = () => {\r\n        switch (confirmType) {\r\n            case 'FULFILL':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='confirm-button' onClick={fulfillOrder}>Confirm Fulfillment</button>\r\n                    </div>\r\n                );\r\n\r\n            case 'CANCEL':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='cancel-button' onClick={cancelOrder}>Confirm Cancellation</button>\r\n                    </div>\r\n                );\r\n            \r\n            case 'DELIVER':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='confirm-button' onClick={deliverOrder}>Confirm order Delivery</button>\r\n                    </div>\r\n                )\r\n            default: return(<div></div>);\r\n        }\r\n    }\r\n\r\n    const selectColor = () => {\r\n        switch(item.status) {\r\n            case 'RECEIVED': return {backgroundColor: '#00b7ff'}\r\n            case 'FULFILLED' : return {backgroundColor: '#6ac482'}\r\n            case 'BACKORDERED' : return {backgroundColor: '#c9cc00' }\r\n            default: return {backgroundColor: '#00b7ff'};\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <div id='list-item' style={selectColor()}>\r\n            <div style={{display: (loading)? 'inline' : 'none'}} className='loader big-load'></div>\r\n            <p className='bold'>{item.user_name}</p>      \r\n            <p>Name: {item.user_first_name}, Manager: {item.user_manager} </p>\r\n            <p>{item.swag_name} quantity: {item.quantity}</p>\r\n            {\r\n                (item.status==='RECEIVED' || item.status==='BACKORDERED')? \r\n                <div>\r\n                    {(confirm)?\r\n                    <div>\r\n                        {displayButton()}\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => {setConfirmType('CANCEL'); setConfirm(true);}}>Cancel Order</button>\r\n                        <button onClick={backOrder}>Back Order</button>\r\n                        <button onClick={() => {setConfirmType('FULFILL'); setConfirm(true)}}>Fullfill Order</button>\r\n                        <button onClick={() => {setConfirmType('DELIVER'); setConfirm(true)}}>Deliver Order</button>\r\n                    </div>\r\n                }\r\n                </div>\r\n                :\r\n                <div>\r\n                    {(confirm)?\r\n                    <div>\r\n                        {displayButton()}\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => {setConfirmType('CANCEL'); setConfirm(true);}}>Cancel Order</button>\r\n                        <button onClick={() => {setConfirmType('DELIVER'); setConfirm(true)}}>Deliver Order</button>\r\n                    </div>\r\n                }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from 'react'; \r\n\r\nimport {useAlert} from 'react-alert';\r\nimport {HOSTNAME} from './../Constants';\r\n\r\nconst BadgeScanDelivery = (props) => {\r\n\r\n    const alert = useAlert();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [user_id, setUserId] = useState('');\r\n\r\n\r\n    const onSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (!user_id)\r\n        {\r\n            alert.error('YOU MUST SCAN ASSOCIATE BADGE BEFORE CLICKING SUBMIT');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'delivery-by-badge/', {\r\n            method: 'POST',\r\n            headers : {\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                user_id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'SUCCESS')\r\n                    alert.success(`SUCESSFULLY MARKED ${data.count} ORDERS FOR DELIVERY!`);\r\n                else if (data.reason === 'NOT_FOUND')\r\n                    alert.error('ASSSOCIATE DOES NOT HAVE ANY FULFILLED ORDERS!');\r\n                else alert.error('SERVER ERROR, PLEASE TRY AGAIN LATER OR CONTACT IT');\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert.error('CONNECTION ISSUE, PLEASE CHECK YOUR INTERNET CONNECTION!');\r\n            })\r\n            .finally(() => {\r\n                setUserId('');\r\n                setLoading(false);\r\n                props.getStore();\r\n            })\r\n        \r\n    }\r\n\r\n    return(\r\n        <div style={{display:'flex', flexDirection: 'row', justifyContent:'left', alignItems: 'center'}}>\r\n            <h2>Delivery by Badge Scan</h2>\r\n            <div>\r\n            {\r\n                (loading)? <div className='loader'></div> :\r\n                <form onSubmit={onSubmit}>\r\n                    <input placeholder='Scan Associate Badge To Deliver Orders'\r\n                        onChange={(e) => setUserId(e.target.value)}></input>\r\n                </form>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BadgeScanDelivery;","import React, {useState} from 'react';\r\nimport ListItem from './ListItem'\r\nimport BadgeScanDelivery from './BadgeScanDelivery'\r\nimport { HOSTNAME } from '../Constants';\r\nimport {useAlert} from 'react-alert';\r\n\r\nconst List = (props) => {\r\n    const alert = useAlert();\r\n    const {setLoading} = props;\r\n    const [search, setSearch] = useState('');\r\n    const [manager, setManager] = useState('');\r\n\r\n    const onChangeSearch = (event) => {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    const onClearList = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'clear-being-fulfilled/', { \r\n            method: 'POST'\r\n        }).then(res => res.json()).then(data => {\r\n            if (data.status === 'SUCCESS') alert.success('CLEARED BEING FULFILLED');\r\n            else alert.error('FAILED TO CLEAR BEING FULFILLED');\r\n        }).catch(e => {\r\n            alert.error('FAILED TO CLEAR BEING FULFILLED. PLEASE CHECK YOUR INTERNET CONNECTION')\r\n        }).finally(() => props.getStore());\r\n    }\r\n\r\n    return (\r\n    <div id='list'>\r\n        <div style={{display: \"flex\", flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\r\n            <h2>{props.title}</h2>\r\n            <input placeholder='Search for login' onChange={onChangeSearch}></input>\r\n            <input placeholder='Search by Manager' onChange={(e) => setManager(e.target.value)}></input>\r\n            <button style={{marginTop:'0px'}} onClick={props.getStore}>Refresh</button>\r\n        </div>\r\n        <div id='inner-list'>\r\n            {props.listOfOrders.filter(item => {\r\n                if (manager && item.user_manager)\r\n                    return item.user_name.includes(search) \r\n                        && item.user_manager.includes(manager);\r\n                else return item.user_name.includes(search);\r\n            }).map(item => <ListItem key={item.cart_id} getStore={props.getStore} item={item}/>)}\r\n        </div>\r\n        <div style={{display: (props.title === 'Fulfilled orders') ? 'block' : 'none', paddingTop: '15px'}}>\r\n            <BadgeScanDelivery getStore={props.getStore}/>\r\n        </div>\r\n\r\n        <div style={{display: (props.title === 'Being Fulfilled orders') ? 'block' : 'none', paddingTop: '15px'}}>\r\n            <button onClick={onClearList}>CLEAR LIST</button>\r\n            <a href='https://tranquil-meadow-63605.herokuapp.com/print-labels'>Print Labels</a>\r\n        </div>\r\n    </div>)\r\n}\r\nexport default List;","import React from 'react';\r\n\r\nconst SwagItem = (props) => {\r\n    return(\r\n    <div className='swag-item'>\r\n        <p>{props.item.swag_item_id}</p>\r\n        <p>{props.item.swag_name}</p>\r\n        <p>{props.item.price}</p>\r\n        <p>{props.item.stock}</p>\r\n\r\n        <div>\r\n        {\r\n            (props.item.display)? <p>Yes</p> : <p>No</p>\r\n        }\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default SwagItem;","import React, {useState, useEffect} from 'react';\r\n\r\nimport {HOSTNAME} from './../Constants'\r\nimport SwagItem from './SwagItem'\r\n\r\nimport {useAlert} from 'react-alert';\r\n\r\nconst SwagList = (props) => {\r\n\r\n    const[swag_item_id, setItemID] = useState('');\r\n    const[swag_name, setItemName] = useState('');\r\n    const[price, setItemPrice] = useState('DEFAULT');\r\n    const[stock, setItemStock] = useState('DEFAULT');\r\n    const[swag_image, setItemImage] = useState('');\r\n    const[display, setDisplay] = useState('');\r\n\r\n    const alert = useAlert();\r\n    const [loading, setLoading] = useState(false);\r\n    const [swagList, setSwagList] = useState([]);\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n    const onEditItem = (e) => {\r\n\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'edit-swag-item/', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                swag_item_id,\r\n                swag_name,\r\n                swag_image,\r\n                price,\r\n                stock,\r\n                display\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS')\r\n                alert.success('SUCCESSFULLY UPDATED DATA');\r\n            else if(data.reason === 'INFO')\r\n                alert.error('YOU MUST FILL ALL FIELDS BEFORE ADDING NEW ITEM');\r\n            else alert.error('SERVER ERROR, PLEASE CONTACT IT');\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert.error('FAILED: CONNECTION ERROR, PLEASE CHECK YOUR INTERNET CONNECTION!');\r\n        }).finally(() => {\r\n            setItemID('');\r\n            setItemName('');\r\n            setItemPrice('DEFAULT');\r\n            setItemStock('DEFAULT');\r\n            setSearch('');\r\n            setItemImage('');\r\n            setLoading(false);\r\n            getSwagList();\r\n        });\r\n    }\r\n    \r\n    const getSwagList = () => {\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'get-list-of-swag-mgmt/')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'SUCCESS')\r\n                {\r\n                    setSwagList(data.swag_items);\r\n                }\r\n                else \r\n                {\r\n                    alert.err('FAILED TO GET SWAG ITEMS, PLEASE TRY AGAIN LATER!');\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n                alert.error('CONNECTION ERROR! PLEASE CHECK YOUR INTERNET CONNECTION!');\r\n            }).finally(() => {\r\n                setLoading(false)\r\n\r\n            });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n    \r\n            setLoading(true);\r\n            fetch(HOSTNAME + 'get-list-of-swag-mgmt/')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status === 'SUCCESS')\r\n                    {\r\n                        setSwagList(data.swag_items);\r\n                    }\r\n                    else \r\n                    {\r\n                        alert.err('FAILED TO GET SWAG ITEMS, PLEASE TRY AGAIN LATER!');\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                    alert.error('CONNECTION ERROR! PLEASE CHECK YOUR INTERNET CONNECTION!');\r\n                }).finally(() => setLoading(false));\r\n\r\n    }, [alert])\r\n\r\n    return (\r\n        <div className='display'>\r\n            <div style={{display:'flex', justifyContent:'space-between', alignItems: 'center'}}>\r\n                <h2>Swag Items List</h2>\r\n                <input onChange={(e) => setSearch(e.target.value)} placeholder='Search item by name'></input>\r\n                <div>\r\n                    <a href={HOSTNAME + 'get-items-list/'}>Get CSV</a>\r\n                    <button onClick={getSwagList} style={{marginLeft: '20px'}}>Refresh</button>\r\n                </div>\r\n            </div>\r\n            <div id='list-wrapper'>\r\n                <div className='swag-item' id='swag-header'>\r\n                    <p>ID</p>\r\n                    <p>Name</p>\r\n                    <p>Price</p>\r\n                    <p>Stock</p>\r\n                    <p>Display</p>\r\n                </div>\r\n                {\r\n                    (loading)? <div className='loader'></div> \r\n                    :\r\n                    <div id='swag-list'>\r\n                        {swagList.filter(item=>item.swag_name.toLowerCase().includes(search.toLowerCase())).filter(item=>item.swag_item_id.includes(swag_item_id)).map(item => <SwagItem key={item.swag_item_id} item={item}></SwagItem>)}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <h2>Edit Item</h2>\r\n            <div>\r\n                {\r\n                    (loading)? <div className='loader'></div> :\r\n                    <form className='flex-wrap' onSubmit={onEditItem} style={{display: 'flex', justifyContent:'center', alignItems: 'center'}}> \r\n                        <input placeholder='Enter item ID to edit' onChange = {e => setItemID(e.target.value)}></input>\r\n                        <input placeholder='Enter correct name' onChange = {e => setItemName(e.target.value)}></input>\r\n                        <input placeholder='Enter correct price' onChange = {e => setItemPrice(e.target.value)} ></input>\r\n                        <input placeholder='Enter correct stock' onChange = {e => setItemStock(e.target.value)}></input>\r\n                        <input placeholder='Enter correct image link' onChange = {e => setItemImage(e.target.value)}></input>\r\n                        <label>Display</label>\r\n                        <select onChange={(e) => setDisplay(e.target.value)}>\r\n                            <option value=''>SELECT</option>\r\n                            <option value='true'>Yes</option>\r\n                            <option value='false'>No</option>\r\n                        </select>\r\n                        <button onClick={onEditItem}>Submit</button>\r\n                    </form>\r\n                }\r\n            </div>\r\n\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwagList;\r\n","import React, {useState} from 'react';\r\nimport {HOSTNAME} from './../Constants'\r\nimport {useAlert} from 'react-alert';\r\n\r\nconst ResetPassword = (props) => {\r\n\r\n    const alert = useAlert();\r\n    const [user_name, setUserName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!user_name)\r\n        {\r\n            alert.error('YOU MUST ENTER ASSOCIATE LOGIN BEFORE CLICKING SUBMIT!');\r\n            return;\r\n        }\r\n        \r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'reset-password/' + user_name)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'SUCCESS')\r\n                    alert.success('SUCCESSFULLY RESETED PASSWORD FOR ASSOCIATE!')\r\n                else if (data.reason === 'NO_MATCH')\r\n                    alert.error('ASSOCIATE LOGIN IS NOT ON RECORD');\r\n                else alert.error('SERVER ERROR: PLEASE TRY AGAIN LATER OR CONTACT IT')\r\n            }).catch(err => {\r\n                console.log(err);\r\n                alert.error('CONNECTION ISSUE, PLEASE CHECK YOUR INTERNET CONNECTION');\r\n            }).finally(() => setLoading(false));\r\n    }\r\n\r\n    return (\r\n    <div className='display'>\r\n        {\r\n            (loading) ? <div className='loader'></div> :\r\n                <div>\r\n                <h2>Password Reset</h2>\r\n                <form onSubmit={onSubmit} style={{display:'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <input onChange={(e)=>setUserName(e.target.value)}placeholder=\"Enter Associate's login to reset\"></input>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n            </div>\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default ResetPassword;","import React, {useState} from 'react';\r\nimport {useAlert} from 'react-alert';\r\n\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst CheckAssociate = (props) => {\r\n    const alert = useAlert()\r\n    const [user_id, setUserID] = useState('');\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!user_id)\r\n        {\r\n            alert.error('YOU MUST ENTER ASSOCIATE LOGIN BEFORE CLICKING SUBMIT!');\r\n            return;\r\n        }\r\n        window.open(HOSTNAME + \"associate-status/\" + user_id)\r\n    }\r\n\r\n    return (\r\n        <div className='display'>\r\n            <h2>Check Associate's Swag</h2>\r\n                <form onSubmit={onSubmit} style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <input placeholder='Scan Badge or enter Login' onChange={(e) => setUserID(e.target.value)}></input>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckAssociate;","import React, {useState, createRef, useEffect} from 'react';\r\nimport {useAlert} from 'react-alert';\r\nimport {HOSTNAME} from '../Constants'\r\n\r\nconst AddSwagBadge = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [user_id, setUserId] = useState('');\r\n    const [swag_amt, setSwag] = useState(0);\r\n    const [reason, setReason] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const amountRef = createRef();\r\n\r\n\r\n\r\n    useEffect(()=> {\r\n        if (!loading)\r\n        {\r\n            if (!amountRef.current.value) \r\n                amountRef.current.placeholder = swag_amt;\r\n        }\r\n    });\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        \r\n        if (!user_id || !reason || !swag_amt)\r\n        {\r\n            alert.error('YOU MUST FILL OUT ALL FIELDS BEFORE SUBMITTING');\r\n            return;\r\n        }\r\n\r\n        const now = new Date();\r\n        const today = now.toLocaleDateString();\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'add-balance/', {\r\n            method:'POST',\r\n            headers : {\r\n                \"Content-Type\" : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_data: user_id, \r\n                swag_amt,\r\n                reason,\r\n                manager_user_name: props.manager_user_name,\r\n                date: today                \r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS') alert.success(`SUCCESSFULLY ADDED ${swag_amt} SWAG TO ${data.user.user_name}`);\r\n            else if (data.reason === 'NO_MATCH') alert.error(`ERROR: ${user_id} IS NOT FOUND IN RECORDS`);\r\n            else alert.error('ERROR: SERVER ERROR PLEASE TRY AGAIN LATER');\r\n\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('CONNECTION ERROR, PLEASE CHECK YOUR INTERNET CONNECTION');\r\n        }).finally(\r\n            () => {\r\n                setLoading(false);\r\n                setUserId('');});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div> { (loading)? <div className='loader'></div> :\r\n                <div>\r\n                    <h2>Individual Swag Addition</h2>\r\n                    <form onSubmit={onSubmit}>\r\n                        <label>$</label>\r\n                        <input id='amount' ref={amountRef} \r\n                            onChange={(e) => setSwag(e.target.value)}></input>\r\n                \r\n                        <input \r\n                            placeholder='Enter reason of distribution'\r\n                            onChange={(e) => setReason(e.target.value)}></input>\r\n\r\n                        <input \r\n                            placeholder='Scan Badge or enter Login' \r\n                            onChange={(e) => setUserId(e.target.value)}></input>\r\n                        \r\n                        <button onClick={onSubmit}>Submit</button>\r\n\r\n                    </form>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AddSwagBadge;","import React, {useState} from 'react';\r\nimport { useAlert} from 'react-alert'\r\nimport {HOSTNAME} from './../Constants'\r\nimport AddSwagBadge from './AddSwagBadge'\r\n\r\nconst MassUpload = (props) => {\r\n    const [hideResults, setHideResults] = useState(true);\r\n    const [path, setPath] = useState('');\r\n    const [successList, setSuccessList] = useState([]);\r\n    const [failedList, setFailedList] = useState([]);\r\n\r\n    const alert = useAlert();\r\n\r\n    const submitAddition = async (user_data, swag_amt, reason) => {\r\n\r\n        const now = new Date();\r\n        const today = now.toLocaleDateString();\r\n\r\n        const associateData = {\r\n            user_data, \r\n            swag_amt, \r\n            reason, \r\n            manager_user_name: props.manager_user_name,\r\n            date: today\r\n        }\r\n        const res = await fetch(HOSTNAME + 'add-balance/', {\r\n            method: 'POST', \r\n            headers: {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body: JSON.stringify(associateData),\r\n        })\r\n\r\n        const data = await res.json();\r\n        \r\n        if (data.status === 'SUCCESS')\r\n            setSuccessList(successList => [...successList, associateData]);\r\n        else \r\n            setFailedList(failedList => [...failedList, associateData]);\r\n    }\r\n\r\n    const parseFileAndSubmit = (uploadedFile) => {\r\n        let currentIndex = 23;\r\n\r\n        const getNextToken = () => {\r\n            var token = '';\r\n    \r\n            if (uploadedFile[currentIndex] === `\"`)\r\n            {\r\n                ++currentIndex;\r\n                while (uploadedFile[currentIndex] !== `\"`\r\n                    && currentIndex < uploadedFile.length)\r\n                {\r\n                    token += uploadedFile[currentIndex];\r\n                    ++currentIndex;\r\n                }\r\n                currentIndex += 2;\r\n                return token;\r\n            }\r\n            else {\r\n                while (currentIndex < uploadedFile.length \r\n                    && uploadedFile[currentIndex] !== ','\r\n                    && uploadedFile[currentIndex] !== '\\n')\r\n                {\r\n                    if (uploadedFile[currentIndex] !== '\\r')\r\n                        token += uploadedFile[currentIndex];\r\n                    ++currentIndex;\r\n                }\r\n                ++currentIndex;\r\n                return token;\r\n            }\r\n        }\r\n\r\n        var user_data = '',  \r\n            swag_amt = '',\r\n            reason = '';\r\n\r\n        while (currentIndex < uploadedFile.length)\r\n        {\r\n            user_data = getNextToken();\r\n            swag_amt = getNextToken();\r\n            reason = getNextToken();\r\n\r\n            submitAddition(user_data, swag_amt, reason);\r\n        }\r\n    }\r\n\r\n    const columnsAreValid = (uploadedFile) => \r\n    {\r\n        if (uploadedFile.length < 23) return false;\r\n        if (uploadedFile.slice(0,23) !== 'associate,swag,reason\\r\\n') return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        setHideResults(false);\r\n\r\n        setSuccessList([]);\r\n        setFailedList([]);\r\n\r\n        const fr = new FileReader();\r\n\r\n        fr.readAsText(path)\r\n\r\n        fr.onloadend = () => {\r\n            if (!columnsAreValid(fr.result)) alert.error('INVALID DATA FORMAT');\r\n            else parseFileAndSubmit(fr.result);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div className='display'>\r\n            <AddSwagBadge manager_user_name={props.manager_user_name} />\r\n            <h2 style={{paddingTop: '30px'}}>Mass Swag Distribution</h2>\r\n            <label>Select .csv file to upload</label>\r\n            <input \r\n                onChange={(event) => setPath(event.target.files[0])} \r\n                type='file' accept='.csv'></input>\r\n            <button onClick={handleSubmit}>Submit</button>\r\n\r\n            <div style={{display: (hideResults)? \"none\": \"block\"}}>\r\n                <h3>SUCCESS</h3>\r\n                <div style={{ backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {successList.map(item=><p style={{margin: '10px', borderBottom: 'solid black 1px'}}>\r\n                        {item.user_data},{item.swag_amt},\"{item.reason}\"</p>)}\r\n                </div>\r\n                \r\n                <h3>FAILED</h3>\r\n                <div style={{backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {failedList.map(item =><p style={{margin: '10px', borderBottom: 'solid black 1px'}}>\r\n                        {item.user_data},{item.swag_amt},\"{item.reason}\"</p>)}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MassUpload;","import React , {useState} from 'react'\r\nimport {useAlert} from 'react-alert'\r\nimport { HOSTNAME } from './../Constants'\r\n\r\nconst IndividualUserAddition = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [user_id, setUserId] = useState('');\r\n    const [user_name, setUserName] = useState('');\r\n    const [user_first_name, setUserFirstName] = useState('');\r\n    const [user_manager, setManager] = useState('');\r\n\r\n    const alert = useAlert();\r\n\r\n    const onSubmit = () => {\r\n        if (!user_id || !user_name || !user_first_name || !user_manager) alert.error('ALL FIELDS ARE REQUIRED BEFORE SUBMITTING!');\r\n        else \r\n        {\r\n            setLoading(true);\r\n            \r\n            fetch(HOSTNAME + 'add-user/', \r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\" : \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    user_id, \r\n                    user_name, \r\n                    user_first_name,\r\n                    user_manager\r\n                })\r\n            }).then(res => {\r\n                return res.json();\r\n            }).then(data => {\r\n                if (data.status === 'SUCCESS') alert.success('SUCCESSFULLY ADDED NEW ASSOCIATE');\r\n                else if (data.reason === 'UNIQUE') alert.error('BADGE ID OR LOGIN ALREADY EXIST!');\r\n                else if (data.reason === 'DATA') alert.error('INVALID INFORMATION FORMAT');\r\n                else alert.error('SERVER ERROR, PLEASE CONTACT IT');\r\n            }).catch(e =>  {\r\n                alert.error('NETWORK ERROR, PLEASE CHECK YOUR CONNECTION');\r\n                console.log(e);\r\n            }).finally(() => {\r\n                setLoading(false);\r\n\r\n                setUserId('');\r\n                setUserName('');\r\n                setUserFirstName('');\r\n                setManager('');\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n        {   \r\n            (loading) ?\r\n            <div classname='loader'/> :\r\n            <div>\r\n                <input onChange={(e) => setUserId(e.target.value)} placeholder='Badge Number'></input>\r\n                <input onChange={(e) => setUserName(e.target.value)} placeholder='Login'></input>\r\n                <input onChange={(e) => setUserFirstName(e.target.value)} placeholder='First Name'></input>\r\n                <input onChange={(e) => setManager(e.target.value)} placeholder='Manager'></input>\r\n                <button onClick={onSubmit}>Submit</button>\r\n            </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndividualUserAddition;","import React, {useState} from 'react';\r\nimport {useAlert} from 'react-alert'\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst MassUserAddition = (props) => {\r\n\r\n    const [successList, setSuccessList] = useState([]);\r\n    const [failList, setFailList] = useState([]);\r\n    const [hideResults, setHideResults] = useState(true);\r\n\r\n    const[path, setPath] = useState('');\r\n\r\n    const alert = useAlert();\r\n\r\n    const submitAdd = (\r\n        user_id, \r\n        user_name, \r\n        user_first_name, \r\n        user_manager) => \r\n    {\r\n        const associateData = {\r\n            user_id,\r\n            user_name, \r\n            user_first_name,\r\n            user_manager,\r\n        }\r\n        console.log(associateData)\r\n\r\n        fetch(HOSTNAME + 'add-user/', \r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify(associateData),\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS') \r\n                setSuccessList(successList => [...successList, {...associateData}]);\r\n            else if (data.reason === 'UNIQUE')\r\n                setFailList(failList => [...failList, {...associateData, reason: 'DUPLICATE'}]);\r\n            else if (data.reason === 'DATA')\r\n                setFailList(failList => [...failList, {...associateData, reason: 'DATA FORMAT'}]);\r\n            else \r\n                setFailList(failList => [...failList, {...associateData, reason: 'CONTACT IT'}]);\r\n        }).catch(e => {\r\n            setFailList(failList => [...failList, {...associateData, reason: 'CONNECTION'}]);\r\n        })\r\n    }\r\n\r\n    const parseFileAndSubmit = (uploadedFile) => {\r\n        let currentIndex = 26;\r\n\r\n        const getNextToken = () => {\r\n            var token = '';\r\n    \r\n            while (currentIndex < uploadedFile.length \r\n                && uploadedFile[currentIndex] !== ','\r\n                && uploadedFile[currentIndex] !== '\\n')\r\n            {\r\n                if (uploadedFile[currentIndex] !== '\\r')\r\n                    token += uploadedFile[currentIndex];\r\n                ++currentIndex;\r\n            }\r\n            ++currentIndex;\r\n            return token;\r\n        }\r\n\r\n        var user_id = '', user_name = '', \r\n            user_manager = '' , user_first_name = '';\r\n\r\n        while (currentIndex < uploadedFile.length)\r\n        {\r\n            user_id = getNextToken();\r\n            user_name = getNextToken();\r\n            user_first_name = getNextToken();\r\n            user_manager = getNextToken();\r\n\r\n            submitAdd(user_id, user_name, user_first_name, user_manager);\r\n        }\r\n    }\r\n\r\n    const columnsAreValid = uploadedFile => {\r\n\r\n        if (uploadedFile.length < 26) return false;\r\n        if (uploadedFile.slice(0,26) !== 'badge,login,name,manager\\r\\n') return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        setHideResults(false);\r\n\r\n        setSuccessList([]);\r\n        setFailList([]);\r\n\r\n        const fr = new FileReader();\r\n        \r\n        fr.readAsText(path);\r\n\r\n        fr.onloadend = () => {\r\n            if(!columnsAreValid(fr.result)) alert.error('Invalid File Format! Please check the guide!');\r\n            else parseFileAndSubmit(fr.result);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label>Select .csv file to upload</label>\r\n            <input type='file' accept='.csv'\r\n                onChange={e => setPath(e.target.files[0])}></input>\r\n            <button onClick={onSubmit}>Submit</button>\r\n            <div style={{display: (hideResults)? 'none' : 'block'}}>\r\n                <h3>Success</h3>\r\n                <div style={{ backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {successList.map((item) => <p>{item.user_id}</p>)}\r\n                </div>\r\n                <h3>Failed</h3>\r\n                <div style={{ backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {failList.map((item) => <p>ID: {item.user_id}, REASON:  {item.reason}</p>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MassUserAddition;","import React from 'react';\r\nimport IndividualUserAddition from './IndividualUserAddition';\r\nimport MassUserAddition from './MassUserAddition';\r\nconst AddUser = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className='display'>\r\n            <h2>Add new Users</h2>\r\n            <h3>Individual User Addition</h3>\r\n            <IndividualUserAddition/>\r\n            <h3>Mass Users Addition</h3>\r\n            <MassUserAddition/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUser;","import React , {useEffect, useState} from 'react'\r\nimport {useAlert} from 'react-alert'\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst ManagerApproval = (props) => {\r\n    const alert = useAlert();\r\n    const [approvalList, setApprovalList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getData = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'manager-list/')\r\n        .then(res => res.json()).then(data => {\r\n            if (data.status === 'SUCCESS')\r\n            setApprovalList(data.data);\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('NETWORK ERROR, PLEASE CHECK YOUR CONNECTION');\r\n        }).finally( () => {\r\n        setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(getData, [])\r\n    \r\n    const activate = (user_name) => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'manager-activation/', {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_name\r\n            })\r\n        }).then(res => res.json())\r\n        .then (data => {\r\n            if (data.status === 'SUCCESS')\r\n                alert.success('SUCCESSFULLY ACTIVATED MANAGER');\r\n            else alert.error('SERVER ERROR')\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('CONNECTION ERROR, PLEASE CHECK YOUR INTERNET');\r\n        }).finally(() => {\r\n            getData();\r\n        })\r\n    }\r\n\r\n    const chooseLoading = () => {\r\n        switch(loading){\r\n            case true:\r\n                return (<div className='loader'></div>)\r\n            default:\r\n                return (approvalList.map(item => \r\n                    <div key={item.user_name} style={{display:'flex',\r\n                         flexDirection: 'row',\r\n                         justifyContent:'space-between', \r\n                         alignItems: 'center',\r\n                         backgroundColor: 'white',\r\n                         paddingRight: '50px'}}>\r\n\r\n                        <p>{item.user_name}</p>\r\n                        {(item.active)? <p style={{ borderRadius: '5px',\r\n                            backgroundColor: 'rgb(0, 209, 108)', \r\n                            padding: '10px',\r\n                            fontWeight: 'bold',\r\n                            color: 'white'}}>Activated</p> :\r\n                        <button onClick={() => activate(item.user_name)}  style={{display: 'inline'}}>Activate</button>}\r\n\r\n                    </div>))\r\n        }\r\n    }\r\n\r\n    return (<div className='display'>\r\n        <h3  style={{display: 'inline'}}>Manager Approval</h3>\r\n        <button onClick={getData}  style={{display: 'inline'}}>Refresh</button>\r\n        <div style ={{backgroundColor: 'white',\r\n                         borderRadius: '10px',\r\n                         maxHeight: '400px',\r\n                         overflowY: 'scroll',\r\n                         padding: '5px',\r\n                         display: 'grid',\r\n                         gridTemplateColumns: '1fr 1fr 1fr 1fr',}}>\r\n            {chooseLoading()}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default ManagerApproval;","import React, {useState} from 'react';\r\nimport { useAlert } from 'react-alert';\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst Login = (props) => {\r\n    const setRoute = props.setRoute;\r\n    const alert = useAlert();\r\n    const [password, setPassword] = useState('');\r\n\r\n    const onLogin = async (e) => {\r\n        e.preventDefault();\r\n        if (!props.manager_user_name || !password) alert.error('PLEASE INPUT BOTH ID AND PASSWORD TO LOGIN');\r\n        else{\r\n            setRoute('LOADING');\r\n        try {\r\n          const res = await fetch(HOSTNAME + 'manager-login', {\r\n            method: 'POST', \r\n            headers: {\r\n              'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              user_name: props.manager_user_name.toLowerCase(),\r\n              password,\r\n            })\r\n          })\r\n    \r\n          const data = await res.json();\r\n          if (data.status === 'SUCCESS')  \r\n          {\r\n            setRoute('MAIN_SCREEN');\r\n          }\r\n          else if (data.reason === 'NOT_FOUND')\r\n          {\r\n            setRoute('INITIATE');\r\n            alert.error('NO MATCHING COMBINATION FOUND');\r\n          }\r\n          else if (data.reason === 'NOT_ACTIVATED')\r\n          {\r\n            setRoute('INITIATE');\r\n            alert.error('YOUR ACCOUNT IS NOT YET ACTIVATED BY THE SWAG STORE MANAGER');\r\n          }\r\n          else {\r\n            setRoute('INITIATE');\r\n            alert.error('SERVER ERROR');\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n            setRoute('INITIATE');\r\n            alert.error('NETWORK ERROR PLEASE CHECK YOUR CONNECTION')\r\n        }\r\n    }\r\n    }\r\n\r\n    return (\r\n        <div className='display'>\r\n          <h3>Manager Login</h3>\r\n          <form style={{color: 'gray'}} onSubmit={onLogin}>\r\n            <label>ID</label>\r\n            <input onChange={e => props.setManager(e.target.value)}></input>\r\n            <label>Password</label>\r\n            <input onChange={e=> setPassword(e.target.value)} type='password'></input>\r\n            <button onClick={onLogin}>Login</button>\r\n          </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\r\nimport { useAlert } from 'react-alert';\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst Login = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [id, setID] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n    const onLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (password !== confirmPassword)\r\n            alert.error('PASSWORD CONFIRMATION DOES NOT MATCH PLEASE CHECK');\r\n        else if (!id || !password || !confirmPassword)\r\n            alert.error('YOU MUST FILL ALL FIELDS TO REGISTER')\r\n        else {\r\n            try {\r\n            const res = await fetch(HOSTNAME + 'manager-registration/', {\r\n                method: 'POST', \r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    user_name: id.toLowerCase(),\r\n                    password,\r\n                })\r\n            })\r\n        \r\n            const data = await res.json();\r\n\r\n            if (data.status === 'SUCCESS')\r\n                alert.success('YOUR REQUEST HAS BEEN SUBMITTED, THE SWAG STORE MANAGER WILL CONFIRM THAT YOU ARE A MANAGER AND ACTIVATE YOUR ACCOUNT WITHIN 24HR')\r\n\r\n            else if (data.reason === 'NOT_ACTIVATED')\r\n                alert.error('YOUR ACCOUNT IS NOT YET ACTIVATED BY THE SWAG STORE MANAGER');\r\n\r\n            else if (data.reason === 'DUPLICATE')\r\n                alert.error('THIS LOGIN HAS BEEN REGISTERED AS A MANAGER ALREADY')\r\n\r\n            else alert.error('SERVER ERROR');\r\n\r\n            } catch (e) {\r\n                alert.error('NETWORK ERROR PLEASE CHECK YOUR CONNECTION')\r\n            }\r\n            setID('');\r\n            setPassword('');\r\n            setConfirmPassword('');\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    const chooseRoute = () => {\r\n        switch(loading){\r\n            case true: return <div className='loader'></div>\r\n            default: return (\r\n                <div className='display'>\r\n                  <h3>Manager Registration</h3>\r\n                  <p style={{color: 'gray'}}>Welcome to our new security login! Please register with your Amazon Login!<br/>\r\n                    After you have successfully registered with your Amazon Login, the SWAG store manager will confirm <br/>\r\n                    your information through Amazon Phonetool and activate your account within 24 hours. <br/>\r\n                    This tool is available to Managers/Process Assistants/Shift Assistants (L3+)<br/>\r\n                    Thank you for your support!\r\n                    </p>\r\n                  <form style={{color: 'gray'}} onSubmit={onLogin}>\r\n                    <label>ID</label>\r\n                    <input onChange={e => setID(e.target.value)}></input>\r\n                    <label>Password</label>\r\n                    <input onChange={e=> setPassword(e.target.value)} type='password'></input>\r\n                    <label>Confirm Password</label>\r\n                    <input onChange={e=> setConfirmPassword(e.target.value)} type='password'></input>\r\n                    <button onClick={onLogin}>Register</button>\r\n                  </form> \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {chooseRoute()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\r\nimport {useAlert} from 'react-alert';\r\nimport { HOSTNAME } from '../Constants';\r\n\r\nconst EachComment = (props) => {\r\n    const item = props.item;\r\n\r\n    const alert = useAlert();\r\n\r\n    const [response, setResponse] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        console.log(item.user_id);\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'response-to-comment', {\r\n            method: 'POST', \r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: item.user_id, \r\n                response, \r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status ==='SUCCESS')\r\n                alert.success('SUCCESSFULLY POSTED RESPONSE');\r\n            else alert.error('FAILED TO POST RESPONSE');\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('FAILED TO POST RESPONSE');\r\n        }).finally(() => {\r\n            setResponse('');\r\n            setLoading(false);\r\n            props.getComments();\r\n        })\r\n    }\r\n\r\nreturn (                    \r\n    <div className='each-comment'>\r\n        <p\r\n            style={{maxWidth: '80vw'}}>\r\n            {item.user_name} \r\n            ({item.user_first_name}): {item.content}\r\n        </p>\r\n\r\n        <form onSubmit={onSubmit}>\r\n            <div className='center'>\r\n                    <textarea style={{width: '80%'}} \r\n                        placeholder={((item.response)?\r\n                            item.response :\r\n                            'Enter Response Here')}\r\n                        onChange={e => setResponse(e.target.value)}\r\n                        value={response}/>\r\n                    <button onClick={onSubmit}>{\r\n                        (loading) ? 'POSTING RESPONSE, PLEASE WAIT...' : \r\n                        'Post'}\r\n                    </button>\r\n                    <p style = {{color: (item.response)? \r\n            '#3dd980' : '#db8239',\r\n            fontWeight:'bold'}}>\r\n            {(item.response)? 'RESPONDED' : 'NOT YET RESPONDED' }\r\n        </p>\r\n            </div>\r\n        </form>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default EachComment;","import React, {useState, useEffect} from 'react'\r\nimport {HOSTNAME} from './../Constants'\r\nimport {useAlert} from 'react-alert'\r\nimport EachComment from './EachComment';\r\n\r\nconst CommentSection = (props) => {\r\n    const alert = useAlert();\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const getComments = () => {\r\n        fetch(HOSTNAME + 'get-all-comments/')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS')\r\n                setComments(data.data);\r\n            else alert.error('FAILED TO GET COMMENTS')\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('FAILED TO GET COMMENTS');\r\n        })\r\n    }\r\n\r\n    useEffect(getComments, [])\r\n\r\n    return (\r\n        <div className='display' id='list'>\r\n            <div style={{display: 'flex', flexDirection: 'row', \r\n                justifyContent: 'space-between', alignItems: 'center'}}>\r\n                <h3>Comments Section</h3>\r\n                <button onClick={getComments}>Refresh</button>\r\n            </div>\r\n            <div id='inner-list'>\r\n                {comments.map(item => \r\n                    <EachComment key={item.comment_id}\r\n                        item={item} getComments={getComments}/>)}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CommentSection;","import React, {useEffect, useState} from 'react';\nimport {useAlert} from 'react-alert'\n\nimport {HOSTNAME} from './Constants'\n\nimport List from './Components/List'\nimport SwagList from './Components/SwagList'\nimport ResetPassword from './Components/ResetPassword'\nimport CheckAssociate from './Components/CheckAssociate'\nimport MassUpload from './Components/MassUpload'\nimport AddUser from './Components/AddUser'\nimport ManagerApproval from './Components/ManagerApproval'\nimport Login from './Components/Login'\nimport Register from './Components/Register'\nimport CommentSection from './Components/CommentSection'\n\nimport './App.scss';\n\n\nfunction App() {\n  const alert = useAlert();\n\n  const [route, setRoute] = useState('INITIATE');\n  const [manager_user_name, setManager] = useState('');\n\n  const [loading, setLoading] = useState(false);\n  const [listOfOrders, setListOfOrder] = useState([]);\n  const [beingFulfilled, setBeingFulfilled] = useState([])\n\n  const getStore = () => {\n    setLoading(true);\n    fetch(HOSTNAME + 'get-order-list-mgmt/')\n    .then(res => res.json())\n    .then(data=>{\n      if(data.status === 'SUCCESS')\n      {\n        setListOfOrder(data.order);\n        setBeingFulfilled(data.beingFulfilled);\n      }\n      else \n      {\n        alert.error('FAILED TO GET LIST OF ORDERS')\n      }\n    }).catch(err => \n    {\n      console.log(err);\n      alert.error('FAILED TO CONNECT TO SERVER, PLEASE CHECK YOU CONNECTION!')\n    }).finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(HOSTNAME + 'get-order-list-mgmt/')\n    .then(res => res.json())\n    .then(data=>{\n      if(data.status === 'SUCCESS')\n      {\n        setListOfOrder(data.order);\n        setBeingFulfilled(data.beingFulfilled);\n      }\n      else \n      {\n        alert.error('FAILED TO GET LIST OF ORDERS')\n      }\n    }).catch(err => \n    {\n      console.log(err);\n      alert.error('FAILED TO CONNECT TO SERVER, PLEASE CHECK YOU CONNECTION!')\n    }).finally(() => setLoading(false));\n  },[alert]);\n\n\n  switch(route)\n  {\n    case 'INITIATE': \n    return (\n      <div className='App'>\n        <div className='display' style={{maxWidth: '700px'}}>\n          <h3>ATTENTION</h3>\n          <p style={{color: '#696969'}}>Please use the Manual Delivery or Badge Scan Delivery Function to mark an order as 'DELIVERED' when handing out items to associates!</p>\n          <p style={{color: '#696969'}}>This also adds a timestamp on the delivery for future reference!</p>\n          <p style={{color: '#696969'}}>We are having problems with associates claiming they did not receive their orders!</p> \n          <p style={{fontWeight: 'bold'}}>Thank you for your support!</p>\n        </div>\n\n        <Login setRoute={setRoute} manager_user_name={manager_user_name} setManager={setManager}></Login>\n        <Register setRoute={setRoute}></Register>\n\n      </div>\n    )\n\n    default:\n  return (\n    <div className=\"App\">\n      <h1>Swag Store Order Management Application</h1>\n      <button onClick={() => {\n          window.open(HOSTNAME + 'all-swag-add-logs');\n      }}>VIEW SWAG DISTRIBUTION LOGS</button>\n      <div>\n        {(loading)? <div className='loader'></div> :\n        <div id='list-container'>\n          <List getStore={getStore} title='Received orders' listOfOrders={listOfOrders.filter(item => item.status ==='RECEIVED')} setLoading={setLoading}></List>\n          <List getStore={getStore} title='Back Ordered' listOfOrders={listOfOrders.filter(item => item.status === 'BACKORDERED')} setLoading={setLoading}></List>\n          <List getStore={getStore} title='Fulfilled orders' listOfOrders={listOfOrders.filter(item => item.status ==='FULFILLED')} setLoading={setLoading}></List>\n          <List getStore={getStore} title='Being Fulfilled orders' listOfOrders={beingFulfilled} setLoading={setLoading}></List>\n        </div>}\n      </div>\n\n      <div style={{display:'flex', flexWrap: 'wrap'}}>\n      <MassUpload manager_user_name={manager_user_name}/>\n\n        <div style={{display:'flex', flexDirection: 'column'}}>\n          <CheckAssociate></CheckAssociate>\n          <ResetPassword/>\n        </div>\n\n      </div>\n\n      <AddUser/>\n      <ManagerApproval/>\n      <div>\n          <SwagList/>\n      </div>\n      <CommentSection/>\n\n    </div>\n  );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\n\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n \n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}